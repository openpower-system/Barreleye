From e83a8a7de39905c400a2fb2c25208524e84a86b0 Mon Sep 17 00:00:00 2001
From: Oliver O'Halloran <oohall@gmail.com>
Date: Wed, 25 Jul 2018 16:09:10 +1000
Subject: [PATCH 1/2] hw/phb4: Work around PHB freezing the wrong PE

In response to a config space write to an already-frozen PE the PHB will
erroreously freeze a different PE. This can be worked around by checking
if the PE we are using for the config space access is already frozen.

Signed-off-by: Oliver O'Halloran <oohall@gmail.com>
---
 hw/phb4.c | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/hw/phb4.c b/hw/phb4.c
index 621535b..d911f67 100644
--- a/hw/phb4.c
+++ b/hw/phb4.c
@@ -526,7 +526,7 @@ static int64_t phb4_pcicfg_write(struct phb4 *p, uint32_t bdfn,
 				 uint32_t offset, uint32_t size,
 				 uint32_t data)
 {
-	uint64_t addr;
+	uint64_t addr, v;
 	int64_t rc;
 	uint16_t pe;
 	bool use_asb = false;
@@ -559,6 +559,15 @@ static int64_t phb4_pcicfg_write(struct phb4 *p, uint32_t bdfn,
 	addr = SETFIELD(PHB_CA_BDFN, addr, bdfn);
 	addr = SETFIELD(PHB_CA_REG, addr, offset & ~3u);
 	addr = SETFIELD(PHB_CA_PE, addr, pe);
+
+	phb4_ioda_sel(p, IODA3_TBL_PESTA, pe, true);
+	v = phb4_read_reg_asb(p, PHB_IODA_DATA0);
+	if (v & PPC_BIT(0)) {
+		PHBDBG(p, "Dropping CFG write to bdfn %#x, reg %#x. PE#%x is already frozen (%08llx)\n",
+			bdfn, offset, pe, v);
+		return OPAL_SUCCESS;
+	}
+
 	if (use_asb) {
 		/* We don't support ASB config space writes */
 		return OPAL_UNSUPPORTED;
-- 
1.9.1

