From 9640fbefb8338c5b39ee9de3ebc5551810b29779 Mon Sep 17 00:00:00 2001
From: Oliver O'Halloran <oohall@gmail.com>
Date: Thu, 7 Jun 2018 18:01:02 +1000
Subject: [PATCH 10/13] zaius: 9797 slot table hack

This can tolerate the 9797 being downstream of a card in a different
slot. It's a little gross, but eh.
---
 platforms/astbmc/astbmc.h |  3 +++
 platforms/astbmc/slots.c  | 24 ++++++++++++++---------
 platforms/astbmc/zaius.c  | 50 ++++++++++++++++++++++++-----------------------
 3 files changed, 44 insertions(+), 33 deletions(-)

diff --git a/platforms/astbmc/astbmc.h b/platforms/astbmc/astbmc.h
index 961f216..845e781 100644
--- a/platforms/astbmc/astbmc.h
+++ b/platforms/astbmc/astbmc.h
@@ -100,6 +100,9 @@ extern void check_all_slot_table(void);
 
 extern void slot_table_init(const struct slot_table_entry *top_table);
 extern void slot_table_get_slot_info(struct phb *phb, struct pci_device * pd);
+void slot_table_add_slot_info(struct pci_device *pd,
+		const struct slot_table_entry *ent);
+
 void dt_slot_get_slot_info(struct phb *phb, struct pci_device *pd);
 
 #endif /* __ASTBMC_H */
diff --git a/platforms/astbmc/slots.c b/platforms/astbmc/slots.c
index 5c0effd..0bd8403 100644
--- a/platforms/astbmc/slots.c
+++ b/platforms/astbmc/slots.c
@@ -96,18 +96,13 @@ static void slot_table_add_properties(struct pci_slot *slot,
 		pci_slot_add_loc(slot, np, NULL);
 }
 
-void slot_table_get_slot_info(struct phb *phb, struct pci_device *pd)
+void slot_table_add_slot_info(struct pci_device *pd,
+		const struct slot_table_entry *ent)
 {
-	const struct slot_table_entry *ent;
 	struct pci_slot *slot;
 
-	if (!pd || pd->slot)
-		return;
-
-	ent = match_slot_dev_entry(phb, pd);
-
 	if (!ent || !ent->name) {
-		slot = pcie_slot_create_dynamic(phb, pd);
+		slot = pcie_slot_create_dynamic(pd->phb, pd);
 		if (slot) {
 			slot->ops.add_properties = slot_table_add_properties;
 			slot->pluggable = true;
@@ -116,7 +111,7 @@ void slot_table_get_slot_info(struct phb *phb, struct pci_device *pd)
 		return;
 	}
 
-	slot = pcie_slot_create(phb, pd);
+	slot = pcie_slot_create(pd->phb, pd);
 	assert(slot);
 
 	slot->pluggable = !!(ent->etype == st_pluggable_slot);
@@ -125,6 +120,17 @@ void slot_table_get_slot_info(struct phb *phb, struct pci_device *pd)
 	slot->data = (void *)ent;
 }
 
+void slot_table_get_slot_info(struct phb *phb, struct pci_device *pd)
+{
+	const struct slot_table_entry *ent;
+
+	if (!pd || pd->slot)
+		return;
+
+	ent = match_slot_dev_entry(phb, pd);
+	slot_table_add_slot_info(pd, ent);
+}
+
 static void dt_slot_add_properties(struct pci_slot *slot,
 				struct dt_node *np)
 {
diff --git a/platforms/astbmc/zaius.c b/platforms/astbmc/zaius.c
index 0ffa62e..349b1c8 100644
--- a/platforms/astbmc/zaius.c
+++ b/platforms/astbmc/zaius.c
@@ -21,6 +21,8 @@
 #include <ipmi.h>
 #include <psi.h>
 #include <npu-regs.h>
+#include <pci.h>
+#include <pci-cfg.h>
 
 #include "astbmc.h"
 
@@ -50,31 +52,28 @@ static const struct slot_table_entry hdd_bay_slots[] = {
 	{ .etype = st_end },
 };
 
-/* 9797 upstream, for some reason both virtual switches are on "port 0" */
-const struct slot_table_entry hdd_upstream[] = {
-	SW_PLUGGABLE("9797 Upstream", 0x0, .children = hdd_bay_slots),
-	{ .etype = st_end },
-};
-
-/* Switch card */
-const struct slot_table_entry sw_downstream[] = {
-	SW_PLUGGABLE("Port 0", 0x6, .children = hdd_upstream),
-	SW_PLUGGABLE("Port 1", 0x7, .children = hdd_upstream),
-	SW_PLUGGABLE("Port 2", 0x4),
-	SW_PLUGGABLE("Port 3", 0x5),
-	{ .etype = st_end },
-};
+static void zaius_get_slot_info(struct phb *phb, struct pci_device *pd)
+{
+	const struct slot_table_entry *ent = NULL;
 
-const struct slot_table_entry sw_upstream[] = {
-	SW_PLUGGABLE("upstream", 0x0, .children = sw_downstream),
-	{ .etype = st_end },
-};
+	if (!pd || pd->slot)
+		return;
 
-/* root complex */
-const struct slot_table_entry pe4_rc[] = { /* root complex slot */
-	SW_PLUGGABLE("PE4", 0x0, .children = sw_upstream),
-	{ .etype = st_end },
-};
+	/*
+	 * If we find a 9797 switch then assume it's the HDD Rack. This might
+	 * break if we have another 9797 in the system for some reason. This is
+	 * a really dumb hack, but until we get query the BMC about wether we
+	 * have a HDD rack or not we don't have much of a choice.
+	 */
+	if (pd->dev_type == PCIE_TYPE_SWITCH_DNPORT && pd->vdid == 0x979710b5)
+		for (ent = hdd_bay_slots; ent->etype != st_end; ent++)
+			if (ent->location == (pd->bdfn & 0xff))
+				break;
+	if (ent)
+		slot_table_add_slot_info(pd, ent);
+	else
+		slot_table_get_slot_info(phb, pd);
+}
 
 const struct platform_ocapi zaius_ocapi = {
 	.i2c_engine        = 1,
@@ -88,6 +87,9 @@ const struct platform_ocapi zaius_ocapi = {
 	.odl_phy_swap      = true,
 };
 
+
+ST_PLUGGABLE(pe4_rc, "PE4");
+
 static const struct slot_table_entry zaius_phb_table[] = {
 /*
 	ST_PHB_ENTRY(0, 0, romulus_cpu1_slot2),
@@ -216,7 +218,7 @@ DECLARE_PLATFORM(zaius) = {
 	.start_preload_resource	= flash_start_preload_resource,
 	.resource_loaded	= flash_resource_loaded,
 	.bmc			= NULL, /* FIXME: Add openBMC */
-	.pci_get_slot_info	= slot_table_get_slot_info,
+	.pci_get_slot_info	= zaius_get_slot_info,
 	.pci_probe_complete	= check_all_slot_table,
 	.cec_power_down         = astbmc_ipmi_power_down,
 	.cec_reboot             = astbmc_ipmi_reboot,
-- 
1.9.1

